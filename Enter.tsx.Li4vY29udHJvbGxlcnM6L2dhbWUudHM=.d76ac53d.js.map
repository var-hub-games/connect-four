{"mappings":"A,I,E,A,W,iB,C,E,E,Q,C,E,Q,S,C,C,C,ECCG,EAAA,OAAA,CAAe,CAAE,WAAY,CAAC,KAAK,KAAK,OAAA,EAAA,SAAuD,SAAS,CAAA,EAAK,MAAM,GAAG,CAAC,C,G,E,Q,S,C,C,C,ECD1H,EAAA,OAAA,CAA4B,09I","sources":["<anon>","src/components/Enter.tsx.Li4vY29udHJvbGxlcnM6L2dhbWUudHM=.js","src/controllers/game.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire1811\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cZ0XH\", function(module, exports) {\n\nmodule.exports = {\n    [\"/game.ts\"]: {\n        type: \"js\",\n        source: (parcelRequire(\"hfzZC\")),\n        evaluate: true,\n        hooks: \"*\"\n    }\n};\n\n});\nparcelRegister(\"hfzZC\", function(module, exports) {\nmodule.exports = 'import room from \"varhub:room\";\\nroom.addEventListener(\"join\", function (event) {\\n    var _a = event.message, name = _a.name, team = _a.team;\\n    event.client[\"name\"] = String(name);\\n    event.client[\"team\"] = String(team);\\n    if (team === \"x\") {\\n        if (state.playerO === name)\\n            return event.preventDefault();\\n        if (state.playerX && state.playerX !== name)\\n            return event.preventDefault();\\n        state.playerX = String(name);\\n        sendUpdateState();\\n    }\\n    else if (team === \"o\") {\\n        if (state.playerX === name)\\n            return event.preventDefault();\\n        if (state.playerO && state.playerO !== name)\\n            return event.preventDefault();\\n        state.playerO = String(name);\\n        sendUpdateState();\\n    }\\n});\\nvar state = {\\n    win: null,\\n    playerX: null,\\n    playerO: null,\\n    height: 0,\\n    data: [],\\n    turn: \"restart\",\\n};\\nfunction sendUpdateState() {\\n    room.broadcast(\"state\", state);\\n}\\nexport function getState() {\\n    return state;\\n}\\nfunction checkPlayerTeam(client) {\\n    if (client[\"name\"] === state.playerX)\\n        return \"x\";\\n    if (client[\"name\"] === state.playerO)\\n        return \"o\";\\n    throw new Error(\"you are not a player\");\\n}\\nfunction oppositeTeam(team) {\\n    return { x: \"o\", o: \"x\" }[team];\\n}\\nexport function start(rows, height) {\\n    checkPlayerTeam(this.client);\\n    if (state.turn !== \"restart\")\\n        throw new Error(\"wrong state\");\\n    if (state.playerO == null || state.playerX == null)\\n        throw new Error(\"no players\");\\n    if (!Number.isInteger(rows))\\n        throw new Error(\"rows format\");\\n    if (!Number.isInteger(height))\\n        throw new Error(\"height format\");\\n    rows = Number(rows);\\n    if (rows < 4 || rows > 20)\\n        throw new Error(\"rows format\");\\n    if (height < 4 || height > 20)\\n        throw new Error(\"height format\");\\n    state.height = height;\\n    state.turn = null;\\n    state.win = null;\\n    state.data = Array.from({ length: rows }).map(function () { return []; });\\n    sendUpdateState();\\n}\\nexport function move(colNumber) {\\n    var team = checkPlayerTeam(this.client);\\n    if (state.turn && state.turn !== team)\\n        throw new Error(\"wrong turn state\");\\n    colNumber = Number(colNumber);\\n    if (!Number.isInteger(colNumber))\\n        throw new Error(\"wrong colNumber\");\\n    if (colNumber < 0 || colNumber >= state.data.length)\\n        throw new Error(\"colNumber out of bounds\");\\n    var col = state.data[colNumber];\\n    if (col.length >= state.height)\\n        throw new Error(\"height out\");\\n    col.push(team);\\n    state.turn = oppositeTeam(team);\\n    checkWin(colNumber, col.length - 1, team);\\n    room.broadcast(\"state\", state);\\n    return true;\\n}\\nvar directions = [[0, 1], [1, 1], [1, 0], [1, -1]];\\nfunction checkWin(colNumber, rowNumber, team) {\\n    var winPoints = checkWinPoints(state.data, colNumber, rowNumber, team, 4);\\n    if (!winPoints)\\n        return;\\n    var winType = { x: \"X\", o: \"O\" }[team];\\n    for (var _i = 0, winPoints_1 = winPoints; _i < winPoints_1.length; _i++) {\\n        var _a = winPoints_1[_i], row = _a[0], col = _a[1];\\n        state.data[row][col] = winType;\\n    }\\n    state.win = team;\\n    state.turn = \"restart\";\\n}\\nfunction checkWinPoints(map, colNumber, rowNumber, team, winLength) {\\n    var _a, _b;\\n    var totalWinPoints = [];\\n    for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {\\n        var dir = directions_1[_i];\\n        var winPoints = [];\\n        var point = [colNumber, rowNumber];\\n        while (true) {\\n            var value = (_a = map[point[0]]) === null || _a === void 0 ? void 0 : _a[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] + dir[0], point[1] + dir[1]];\\n        }\\n        point = [colNumber - dir[0], rowNumber - dir[1]];\\n        while (true) {\\n            var value = (_b = map[point[0]]) === null || _b === void 0 ? void 0 : _b[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] - dir[0], point[1] - dir[1]];\\n        }\\n        if (winPoints.length >= winLength)\\n            totalWinPoints.push.apply(totalWinPoints, winPoints);\\n    }\\n    if (totalWinPoints.length === 0)\\n        return null;\\n    return totalWinPoints;\\n}\\nexport function destroy() {\\n    checkPlayerTeam(this.client);\\n    room.close(\"closed by \" + this.client.name);\\n    return true;\\n}\\n';\n\n});\n\n\n\n//# sourceMappingURL=Enter.tsx.Li4vY29udHJvbGxlcnM6L2dhbWUudHM=.d76ac53d.js.map\n","\n\t\t\tmodule.exports={[\"/game.ts\"]:{type:\"js\",source:require(\"varhub-source:../controllers/game.ts\"),evaluate:true,hooks:\"*\"}}\n\t\t","import room, { type Client } from \"varhub:room\";\n\nroom.addEventListener(\"join\", event => {\n\tconst {name, team} = event.message;\n\tevent.client[\"name\"] = String(name);\n\tevent.client[\"team\"] = String(team);\n\tif (team === \"x\") {\n\t\tif (state.playerO === name) return event.preventDefault();\n\t\tif (state.playerX && state.playerX !== name) return event.preventDefault();\n\t\tstate.playerX = String(name);\n\t\tsendUpdateState();\n\t} else if (team === \"o\") {\n\t\tif (state.playerX === name) return event.preventDefault();\n\t\tif (state.playerO && state.playerO !== name) return event.preventDefault();\n\t\tstate.playerO = String(name);\n\t\tsendUpdateState();\n\t}\n});\n\nconst state = {\n\twin: null as \"x\"|\"o\"|null,\n\tplayerX: null as string|null,\n\tplayerO: null as string|null,\n\theight: 0,\n\tdata: [] as (\"x\"|\"o\"|\"X\"|\"O\")[][],\n\tturn: \"restart\" as \"restart\"|\"x\"|\"o\"|null,\n}\n\n\nfunction sendUpdateState(){\n\troom.broadcast(\"state\", state);\n}\nexport function getState(){\n\treturn state;\n}\n\n\nfunction checkPlayerTeam(client: Client): \"x\" | \"o\" {\n\tif (client[\"name\"] === state.playerX) return \"x\";\n\tif (client[\"name\"] === state.playerO) return \"o\";\n\tthrow new Error(\"you are not a player\");\n}\n\nfunction oppositeTeam(team: \"x\"|\"o\"): \"x\"|\"o\" {\n\treturn ({x: \"o\", o: \"x\"} as const)[team]\n}\n\nexport function start(rows: number, height: number){\n\tcheckPlayerTeam(this.client);\n\tif (state.turn !== \"restart\") throw new Error(\"wrong state\");\n\tif (state.playerO == null || state.playerX == null) throw new Error(\"no players\");\n\tif (!Number.isInteger(rows)) throw new Error(\"rows format\");\n\tif (!Number.isInteger(height)) throw new Error(\"height format\");\n\trows = Number(rows);\n\tif (rows < 4 || rows > 20) throw new Error(\"rows format\");\n\tif (height < 4 || height > 20) throw new Error(\"height format\");\n\n\tstate.height = height;\n\tstate.turn = null;\n\tstate.win = null;\n\tstate.data = Array.from({length: rows}).map(() => [])\n\tsendUpdateState();\n}\n\nexport function move(colNumber: number){\n\tconst team = checkPlayerTeam(this.client);\n\tif (state.turn && state.turn !== team) throw new Error(\"wrong turn state\");\n\tcolNumber = Number(colNumber);\n\n\tif (!Number.isInteger(colNumber)) throw new Error(\"wrong colNumber\");\n\tif (colNumber < 0 || colNumber >= state.data.length) throw new Error(\"colNumber out of bounds\");\n\tconst col = state.data[colNumber];\n\tif (col.length >= state.height) throw new Error(\"height out\");\n\tcol.push(team);\n\tstate.turn = oppositeTeam(team);\n\tcheckWin(colNumber, col.length - 1, team);\n\troom.broadcast(\"state\", state);\n\treturn true;\n}\n\nconst directions: [number, number][] = [[0, 1], [1, 1], [1, 0], [1, -1]]\nfunction checkWin(colNumber: number, rowNumber: number, team: \"x\"|\"o\"){\n\tconst winPoints = checkWinPoints(state.data, colNumber, rowNumber, team, 4);\n\tif (!winPoints) return;\n\tconst winType = ({x: \"X\", o: \"O\"} as const)[team]\n\tfor (const [row, col] of winPoints) state.data[row][col] = winType;\n\tstate.win = team;\n\tstate.turn = \"restart\";\n}\n\nfunction checkWinPoints(map: (\"x\"|\"o\"|\"X\"|\"O\")[][], colNumber: number, rowNumber: number, team: \"x\"|\"o\", winLength: number): null | [number, number][]{\n\tconst totalWinPoints: [number, number][] = [];\n\tfor (const dir of directions) {\n\t\tconst winPoints = [];\n\t\tlet point = [colNumber, rowNumber];\n\t\twhile (true) {\n\t\t\tconst value = map[point[0]]?.[point[1]];\n\t\t\tif (value !== team) break;\n\t\t\twinPoints.push(point);\n\t\t\tpoint = [point[0]+dir[0], point[1]+dir[1]]\n\t\t}\n\t\tpoint = [colNumber-dir[0], rowNumber-dir[1]];\n\t\twhile (true) {\n\t\t\tconst value = map[point[0]]?.[point[1]];\n\t\t\tif (value !== team) break;\n\t\t\twinPoints.push(point);\n\t\t\tpoint = [point[0]-dir[0], point[1]-dir[1]]\n\t\t}\n\t\tif (winPoints.length >= winLength) totalWinPoints.push(...winPoints);\n\t}\n\tif (totalWinPoints.length === 0) return null;\n\treturn totalWinPoints;\n}\n\nexport function destroy() {\n\tcheckPlayerTeam(this.client);\n\troom.close(\"closed by \"+this.client.name);\n\treturn true;\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","type","source","evaluate","hooks"],"version":3,"file":"Enter.tsx.Li4vY29udHJvbGxlcnM6L2dhbWUudHM=.d76ac53d.js.map"}