(0,globalThis.parcelRequire1811.register)("6sg5t",function(n,t){Object.defineProperty(n.exports,"__esModule",{value:!0,configurable:!0}),Object.defineProperty(n.exports,"default",{get:()=>e,set:void 0,enumerable:!0,configurable:!0});var e='import room from "varhub:room";\nroom.addEventListener("join", function (event) {\n    var _a = event.message, name = _a.name, team = _a.team;\n    event.client["name"] = String(name);\n    event.client["team"] = String(team);\n    if (team === "x") {\n        if (state.playerO === name)\n            return event.preventDefault();\n        if (state.playerX && state.playerX !== name)\n            return event.preventDefault();\n        state.playerX = String(name);\n        sendUpdateState();\n    }\n    else if (team === "o") {\n        if (state.playerX === name)\n            return event.preventDefault();\n        if (state.playerO && state.playerO !== name)\n            return event.preventDefault();\n        state.playerO = String(name);\n        sendUpdateState();\n    }\n    console.log("JOINED", name, team);\n});\nvar state = {\n    win: null,\n    playerX: null,\n    playerO: null,\n    height: 0,\n    data: [],\n    turn: "restart",\n};\nfunction sendUpdateState() {\n    room.broadcast("state", state);\n}\nexport function getState() {\n    return state;\n}\nfunction checkPlayerTeam(client) {\n    if (client["name"] === state.playerX)\n        return "x";\n    if (client["name"] === state.playerO)\n        return "o";\n    throw new Error("you are not a player");\n}\nfunction oppositeTeam(team) {\n    return { x: "o", o: "x" }[team];\n}\nexport function start(rows, height) {\n    checkPlayerTeam(this.client);\n    if (state.turn !== "restart")\n        throw new Error("wrong state");\n    if (state.playerO == null || state.playerX == null)\n        throw new Error("no players");\n    if (!Number.isInteger(rows))\n        throw new Error("rows format");\n    if (!Number.isInteger(height))\n        throw new Error("height format");\n    rows = Number(rows);\n    if (rows < 4 || rows > 20)\n        throw new Error("rows format");\n    if (height < 4 || height > 20)\n        throw new Error("height format");\n    state.height = height;\n    state.turn = null;\n    state.win = null;\n    state.data = Array.from({ length: rows }).map(function () { return []; });\n    sendUpdateState();\n}\nexport function move(colNumber) {\n    var team = checkPlayerTeam(this.client);\n    if (state.turn && state.turn !== team)\n        throw new Error("wrong turn state");\n    colNumber = Number(colNumber);\n    if (!Number.isInteger(colNumber))\n        throw new Error("wrong colNumber");\n    if (colNumber < 0 || colNumber >= state.data.length)\n        throw new Error("colNumber out of bounds");\n    var col = state.data[colNumber];\n    if (col.length >= state.height)\n        throw new Error("height out");\n    col.push(team);\n    state.turn = oppositeTeam(team);\n    checkWin(colNumber, col.length - 1, team);\n    room.broadcast("state", state);\n    return true;\n}\nvar directions = [[0, 1], [1, 1], [1, 0]];\nfunction checkWin(colNumber, rowNumber, team) {\n    var winPoints = checkWinPoints(state.data, colNumber, rowNumber, team, 4);\n    if (!winPoints)\n        return;\n    var winType = { x: "X", o: "O" }[team];\n    for (var _i = 0, winPoints_1 = winPoints; _i < winPoints_1.length; _i++) {\n        var _a = winPoints_1[_i], row = _a[0], col = _a[1];\n        state.data[row][col] = winType;\n    }\n    state.win = team;\n    state.turn = "restart";\n}\nfunction checkWinPoints(map, colNumber, rowNumber, team, winLength) {\n    var _a, _b;\n    var totalWinPoints = [];\n    for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {\n        var dir = directions_1[_i];\n        var winPoints = [];\n        var point = [colNumber, rowNumber];\n        while (true) {\n            var value = (_a = map[point[0]]) === null || _a === void 0 ? void 0 : _a[point[1]];\n            if (value !== team)\n                break;\n            winPoints.push(point);\n            point = [point[0] + dir[0], point[1] + dir[1]];\n        }\n        point = [colNumber - dir[0], rowNumber - dir[1]];\n        while (true) {\n            var value = (_b = map[point[0]]) === null || _b === void 0 ? void 0 : _b[point[1]];\n            if (value !== team)\n                break;\n            winPoints.push(point);\n            point = [point[0] - dir[0], point[1] - dir[1]];\n        }\n        if (winPoints.length >= winLength)\n            totalWinPoints.push.apply(totalWinPoints, winPoints);\n    }\n    if (totalWinPoints.length === 0)\n        return null;\n    return totalWinPoints;\n}\nexport function destroy() {\n    checkPlayerTeam(this.client);\n    room.close("closed by " + this.client.name);\n    return true;\n}\n'});//# sourceMappingURL=game.9072c29d.js.map

//# sourceMappingURL=game.9072c29d.js.map
